package com.revature.thevault.presentation.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.revature.thevault.presentation.model.request.DepositRequest;
import com.revature.thevault.presentation.model.response.DepositResponse;
import com.revature.thevault.repository.entity.DepositEntity;
import com.revature.thevault.service.classes.DepositService;

@CrossOrigin("*")
@RestController("depositController")
@RequestMapping("/deposit")
public class DepositController {
	@Autowired
	private DepositService depositService;

	@ResponseStatus(HttpStatus.CREATED)
	    @PostMapping(path = "/create",consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	  public DepositResponse createDeposit(@RequestBody DepositRequest depositRequest){
	   return depositService.createDeposit(depositRequest);
	}
	@ResponseStatus(HttpStatus.OK)
	@GetMapping(path = "/getall", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<DepositEntity> getAllDeposits() {
		return depositService.getAllDeposits();
	}

	@ResponseStatus(HttpStatus.OK)
	@GetMapping(path = "/getalluser/{", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<DepositEntity> getAllUserDeposits(@RequestParam int accountId) {
		return depositService.getAllUserDeposits(accountId);
	}

	@ResponseStatus(HttpStatus.OK)
	@GetMapping(path = "/getalluserbytype", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<DepositEntity> getAlLUserDepositsOfType(@RequestParam int accountId, @RequestParam int depositTypeId) {
		return depositService.getAlLUserDepositsOfType(accountId, depositTypeId);
	}

	@ResponseStatus(HttpStatus.OK)
	@GetMapping(path = "/getallbytype", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<DepositEntity> getAllDepositsOfType(@RequestParam int depositTypeId) {
		return depositService.getAllDepositsOfType(depositTypeId);
	}
}