package com.revature.thevault.service.classes;


import java.util.Collections;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.revature.thevault.presentation.model.request.DepositRequest;
import com.revature.thevault.presentation.model.request.GetAccountRequestSingle;
import com.revature.thevault.presentation.model.response.DepositResponse;
import com.revature.thevault.presentation.model.response.builder.PostResponse;
import com.revature.thevault.repository.dao.DepositRepository;
import com.revature.thevault.repository.entity.AccountEntity;
import com.revature.thevault.repository.entity.DepositEntity;
import com.revature.thevault.service.exceptions.NoDepositsFoundGenericException;
import com.revature.thevault.service.interfaces.DepositServiceInterface;
import com.revature.thevault.utility.enums.ResponseType;

@Service("depositService")
public class DepositService implements DepositServiceInterface {
	
	@Autowired
    private DepositRepository depositRepository;
	@Autowired 
	DepositTypeService	depositTypeService;
	@Override
	public DepositResponse createDeposit(DepositRequest depositRequest) {
		  try {
	            return PostResponse.builder()
	                    .success(true)
	                    .responseType(ResponseType.POST)
	                    .message("Successful Account Creation")
	                    .createdObject(Collections.singletonList(
	                            depositRepository.save(
	                                    new DepositEntity(
	                                            0,
	                                            new AccountEntity()
	                                            //depositTypeService.findDepositTypeEntityByName(DepositRequest.getAccountType()),
	                                            0,
	                                            0,
	                                            0,
	                                            0	                                            
	                                    )
	                            )
	                    ))
	                    .build();
//	        }catch(InvalidAccountTypeException e){
//	            throw e;
	        }catch (Exception e){
	            //throw new InvalidRequestException(HttpStatus.BAD_REQUEST, "Invalid Request: " + e);
	        }
	//	return null;
	    }

//	@Override
//	public List<DepositEntity> getAllUserDeposits(int accountId) {
//		  try {
//	            Optional<DepositEntity> depositEntityOptional = depositRepository.findById(accountId);
//	            if (depositEntityOptional.isPresent()) 
//	            	return DepositResponse.builder()
//						.success(true)
//						.responseType(ResponseType.GET)
//						.message("Presenting all the deposits From AccountID:" + )
//						.gotObject(Collections.singletonList(depositEntityOptional.get()))
//						.build();
//	else
//		throw new CustomGenericException(HttpStatus.BAD_REQUEST, "message explaining what happened";
//// The custom exception must be caught within a catch block in order to not be consumed by the generic Exception catch block
//}catch(NoDepositsFoundGenericException e){
//	throw e;
//}catch(Exception e){
//	throw new CustomGenericException(HttpStatus.BAD_REQUEST, "invalid Request");
//}
//		return null;
//	}

	@Override
	public List<DepositEntity> getAlLUserDepositsOfType(int accountId, int depositTypeId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<DepositEntity> getAllDeposits() {
		// TODO Auto-generated method stub
		return this.depositRepository.findAll();
	}

	@Override
	public List<DepositEntity> getAllDepositsOfType(int depositTypeId) {
		// TODO Auto-generated method stub
		return null;
	}


}
